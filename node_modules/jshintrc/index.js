module.exports = {
    // Adding comment when add new config
    
    // Settings
    "passfail"      : false, // Stop on first error.
    "maxerr"        : 20,    // Maximum errors before stopping.


    // Predefined globals whom JSHint will ignore.
    // Standard browser globals e.g. `window`, `document`.
    "browser"       : true,   

    "node"          : false,

    // Development.
    "debug"         : false,  // Allow debugger statements e.g. browser breakpoints.
    "devel"         : true,   // Allow development statements e.g. `console.log();`.


    // Allow EcmaScript 5 syntax.
    // ACTUALLY jshint don't allow to set global es5 as `true`
    "es5"           : false, 

    // Must backward compatible with ecma3, and any usage of reserved words will be considered as a fatal failure.
    // `obj.default = true` which is not allowed.
    "es3"           : true,

    "strict"        : false,  // Require `use strict` pragma in every file.
    "globalstrict"  : false,  // Allow global "use strict" (also enables 'strict').


    // The Good Parts.
    "asi"           : false,  // Tolerate Automatic Semicolon Insertion (no semicolons).

    // Tolerate unsafe line breaks. 
    // The code below will be allowd:
    // <code>
    //     return  // without semicolons.
    //     x
    // </code>
    // or
    // <code>
    //     flag
    //         ? 1
    //         : 0
    // </code>
    "laxbreak"      : false,  

    // Each variable with a var which is better than one var for several variables, IMO.
    "onevar"        : false,

    "bitwise"       : false,  // Prohibit bitwise operators (&, |, ^, etc.).
    "boss"          : true,   // Tolerate assignments inside if, for & while. Usually conditions & loops are for comparison, not assignments.
    "curly"         : false,  // Require {} for every new block or scope.
    "eqeqeq"        : false,  // Require triple equals i.e. `===`.
    "eqnull"        : false,  // Tolerate use of `== null`.

    // Tolerate use of `eval`.
    "evil"          : true,   
    "expr"          : true,   // Tolerate `ExpressionStatement` as Programs.
    "forin"         : false,  // Tolerate `for in` loops without `hasOwnPrototype`.
    "immed"         : true,   // Require immediate invocations to be wrapped in parens e.g. `( function(){}() );`
    "latedef"       : false,  // Prohibit variable use before definition.
    "loopfunc"      : true,   // Allow functions to be defined within loops.
    "noarg"         : true,   // Prohibit use of `arguments.caller` and `arguments.callee`.
    "regexp"        : true,   // Prohibit `.` and `[^...]` in regular expressions.
    "regexdash"     : false,  // Tolerate unescaped last dash i.e. `[-...]`.
    "scripturl"     : true,   // Tolerate script-targeted URLs.
    "shadow"        : true,   // Allows re-define variables later in code e.g. `var x=1; x=2;`.
    "supernew"      : false,  // Tolerate `new function () { ... };` and `new Object;`.
    "undef"         : false,  // Require all non-global variables be declared before they are used.


    // Persone styling prefrences.
    "newcap"        : false,  // Require capitalization of all constructor functions e.g. `new F()`.
    "noempty"       : true,   // Prohibit use of empty blocks.
    "nonew"         : false,  // Prohibit use of constructors for side-effects.
    "nomen"         : false,  // Prohibit use of initial or trailing underbars in names.
    "onevar"        : false,  // Allow only one `var` statement per function.
    "plusplus"      : false,  // Prohibit use of `++` & `--`.
    "sub"           : false,  // Tolerate all forms of subscript notation besides dot notation e.g. `dict['key']` instead of `dict.key`.
    "trailing"      : false,  // Prohibit trailing whitespaces.
    "white"         : false   // Check against strict whitespace and indentation rules.
};
